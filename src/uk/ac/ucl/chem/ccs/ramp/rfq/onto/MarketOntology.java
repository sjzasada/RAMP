// file: MarketOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package uk.ac.ucl.chem.ccs.ramp.rfq.onto;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: MarketOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2011/06/11, 21:40:02
 */
public class MarketOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -1439939741134496089L;

  //NAME
  public static final String ONTOLOGY_NAME = "Market";
  // The singleton instance of this ontology
  private static Ontology theInstance = new MarketOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String CORES_RESOURCE="RESOURCE";
    public static final String CORES_TOTALCORES="TOTALCORES";
    public static final String CORES_NODECORES="NODECORES";
    public static final String CORES_DURATION="DURATION";
    public static final String CORES_NODECOUNT="NODECOUNT";
    public static final String CORES="Cores";
    public static final String COST_CORES="CORES";
    public static final String COST_CPUHOURCOST="CPUHOURCOST";
    public static final String COST_NOTBEFORE="NOTBEFORE";
    public static final String COST_DEADLINE="DEADLINE";
    public static final String COST="Cost";
    public static final String OFFER_OFFERID="OFFERID";
    public static final String OFFER_OFFERCOST="OFFERCOST";
    public static final String OFFER="Offer";
    public static final String RFQ_REQUESTID="REQUESTID";
    public static final String RFQ_COST="COST";
    public static final String RFQ="RFQ";
    public static final String CANCEL_CANCELINSTANCE="CANCELINSTANCE";
    public static final String CANCEL="Cancel";
    public static final String MAKEOFFER_OFFERINSTANCE="OFFERINSTANCE";
    public static final String MAKEOFFER="MakeOffer";
    public static final String MAKEREQUEST_RFQINSTANCE="RFQINSTANCE";
    public static final String MAKEREQUEST="MakeRequest";
    public static final String RESCHEDULE_RSCHEDINSTANCE="RSCHEDINSTANCE";
    public static final String RESCHEDULE="Reschedule";
    public static final String RESOURCE_NODEDISKSPACE="NODEDISKSPACE";
    public static final String RESOURCE_OSVERSION="OSVERSION";
    public static final String RESOURCE_ARCHITECTURE="ARCHITECTURE";
    public static final String RESOURCE_OPERATINGSYSTEM="OPERATINGSYSTEM";
    public static final String RESOURCE_CPUSPEED="CPUSPEED";
    public static final String RESOURCE_INTERNODEBANDWIDTH="INTERNODEBANDWIDTH";
    public static final String RESOURCE_RAMPERCORE="RAMPERCORE";
    public static final String RESOURCE_TOTALDISKSPACE="TOTALDISKSPACE";
    public static final String RESOURCE="Resource";

  /**
   * Constructor
  */
  private MarketOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema resourceSchema = new ConceptSchema(RESOURCE);
    add(resourceSchema, uk.ac.ucl.chem.ccs.ramp.rfq.onto.Resource.class);

    // adding AgentAction(s)
    AgentActionSchema rescheduleSchema = new AgentActionSchema(RESCHEDULE);
    add(rescheduleSchema, uk.ac.ucl.chem.ccs.ramp.rfq.onto.Reschedule.class);
    AgentActionSchema makeRequestSchema = new AgentActionSchema(MAKEREQUEST);
    add(makeRequestSchema, uk.ac.ucl.chem.ccs.ramp.rfq.onto.MakeRequest.class);
    AgentActionSchema makeOfferSchema = new AgentActionSchema(MAKEOFFER);
    add(makeOfferSchema, uk.ac.ucl.chem.ccs.ramp.rfq.onto.MakeOffer.class);
    AgentActionSchema cancelSchema = new AgentActionSchema(CANCEL);
    add(cancelSchema, uk.ac.ucl.chem.ccs.ramp.rfq.onto.Cancel.class);

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema rfqSchema = new PredicateSchema(RFQ);
    add(rfqSchema, uk.ac.ucl.chem.ccs.ramp.rfq.onto.RFQ.class);
    PredicateSchema offerSchema = new PredicateSchema(OFFER);
    add(offerSchema, uk.ac.ucl.chem.ccs.ramp.rfq.onto.Offer.class);
    PredicateSchema costSchema = new PredicateSchema(COST);
    add(costSchema, uk.ac.ucl.chem.ccs.ramp.rfq.onto.Cost.class);
    PredicateSchema coresSchema = new PredicateSchema(CORES);
    add(coresSchema, uk.ac.ucl.chem.ccs.ramp.rfq.onto.Cores.class);


    // adding fields
    resourceSchema.add(RESOURCE_TOTALDISKSPACE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    resourceSchema.add(RESOURCE_RAMPERCORE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    resourceSchema.add(RESOURCE_INTERNODEBANDWIDTH, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    resourceSchema.add(RESOURCE_CPUSPEED, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    resourceSchema.add(RESOURCE_OPERATINGSYSTEM, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    resourceSchema.add(RESOURCE_ARCHITECTURE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    resourceSchema.add(RESOURCE_OSVERSION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    resourceSchema.add(RESOURCE_NODEDISKSPACE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rescheduleSchema.add(RESCHEDULE_RSCHEDINSTANCE, rfqSchema);
    makeRequestSchema.add(MAKEREQUEST_RFQINSTANCE, rfqSchema);
    makeOfferSchema.add(MAKEOFFER_OFFERINSTANCE, offerSchema);
    cancelSchema.add(CANCEL_CANCELINSTANCE, rfqSchema);
    rfqSchema.add(RFQ_COST, costSchema, ObjectSchema.MANDATORY);
    rfqSchema.add(RFQ_REQUESTID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    offerSchema.add(OFFER_OFFERCOST, costSchema, ObjectSchema.MANDATORY);
    offerSchema.add(OFFER_OFFERID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    costSchema.add(COST_DEADLINE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    costSchema.add(COST_NOTBEFORE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    costSchema.add(COST_CPUHOURCOST, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    costSchema.add(COST_CORES, coresSchema, ObjectSchema.MANDATORY);
    coresSchema.add(CORES_NODECOUNT, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    coresSchema.add(CORES_DURATION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    coresSchema.add(CORES_NODECORES, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    coresSchema.add(CORES_TOTALCORES, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    coresSchema.add(CORES_RESOURCE, resourceSchema, ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
