// file: MarketOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package uk.ac.ucl.chem.ccs.ramp.rfq.manualonto;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: MarketOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2011/06/11, 21:40:02
 */
public class MarketOntology extends jade.content.onto.Ontology  {

  //private static final long serialVersionUID = -1439939741134496089L;

  //NAME
  public static final String ONTOLOGY_NAME = "Market";
  // The singleton instance of this ontology
  private static Ontology theInstance = new MarketOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
  public static final String RFQ="rfq";
  public static final String RFQ_CPUHOURCOST="CPUHOURCOST";
  public static final String RFQ_NOTBEFORE="NOTBEFORE";
  public static final String RFQ_DEADLINE="DEADLINE";
  public static final String RFQ_OPERATINGSYSTEM="OPERATINGSYSTEM";
  public static final String RFQ_OSVERSION="OSVERSION";
  public static final String RFQ_ARCHITECTURE="ARCHITECTURE";
  public static final String RFQ_CPUSPEED="CPUSPEED";
  public static final String RFQ_DURATION="DURATION";
  public static final String RFQ_INTERNODEBANDWIDTH="INTERNODEBANDWIDTH";
  public static final String RFQ_RAMPERCORE="RAMPERCORE";
  public static final String RFQ_NODEDISKSPACE="NODEDISKSPACE";
  public static final String RFQ_TOTALDISKSPACE="TOTALDISKSPACE";
  public static final String RFQ_TOTALCORES="TOTALCORES";
  public static final String RFQ_NODECORES="NODECORES";
  public static final String RFQ_NODECOUNT="NODECOUNT";
  public static final String RFQ_REQUESTID="REQUESTID";

 
    
    
    
    public static final String OFFER_OFFERID="OFFERID";
    public static final String OFFER_OFFERRFQ="OFFERRFQ";
    public static final String OFFER="Offer";


    
    
    //public static final String CANCEL_CANCELINSTANCE="CANCELINSTANCE";
    //public static final String CANCEL="Cancel";
    public static final String MAKEOFFER_OFFERINSTANCE="OFFERINSTANCE";
    public static final String MAKEOFFER="MakeOffer";
    public static final String MAKEREQUEST_RFQINSTANCE="RFQINSTANCE";
    public static final String MAKEREQUEST="MakeRequest";
    //public static final String RESCHEDULE_RSCHEDINSTANCE="RSCHEDINSTANCE";
    //public static final String RESCHEDULE="Reschedule";


  /**
   * Constructor
  */
  private MarketOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema rfqSchema = new ConceptSchema(RFQ);
    add(rfqSchema, RFQ.class);
    ConceptSchema offerSchema = new ConceptSchema(OFFER);
    add(offerSchema, Offer.class);

    // adding AgentAction(s)
    //AgentActionSchema rescheduleSchema = new AgentActionSchema(RESCHEDULE);
    //add(rescheduleSchema, Reschedule.class);
    AgentActionSchema makeRequestSchema = new AgentActionSchema(MAKEREQUEST);
    add(makeRequestSchema, MakeRequest.class);
    AgentActionSchema makeOfferSchema = new AgentActionSchema(MAKEOFFER);
    add(makeOfferSchema, MakeOffer.class);
    //AgentActionSchema cancelSchema = new AgentActionSchema(CANCEL);
    //add(cancelSchema, Cancel.class);

    // adding AID(s)

    // adding Predicate(s)
//    PredicateSchema rfqSchema = new PredicateSchema(RFQ);
//    add(rfqSchema, RFQ.class);
//    PredicateSchema offerSchema = new PredicateSchema(OFFER);
//    add(offerSchema, Offer.class);
//    PredicateSchema costSchema = new PredicateSchema(COST);
//    add(costSchema, Cost.class);
//    PredicateSchema coresSchema = new PredicateSchema(CORES);
//    add(coresSchema, Cores.class);



    
    
    // adding fields
    rfqSchema.add(RFQ_TOTALDISKSPACE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_RAMPERCORE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_INTERNODEBANDWIDTH, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_CPUSPEED, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_OPERATINGSYSTEM, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_ARCHITECTURE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_OSVERSION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NODEDISKSPACE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_DEADLINE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NOTBEFORE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_CPUHOURCOST, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NODECOUNT, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_DURATION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NODECORES, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_TOTALCORES, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_REQUESTID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);

    makeRequestSchema.add(MAKEREQUEST_RFQINSTANCE, rfqSchema, 1, ObjectSchema.UNLIMITED);//any number of RFQs can be requested
    makeOfferSchema.add(MAKEOFFER_OFFERINSTANCE, offerSchema); //just one offer can be made

    
    
    offerSchema.add(OFFER_OFFERRFQ, rfqSchema, ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_OFFERID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);


    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
