// file: MarketOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package uk.ac.ucl.chem.ccs.ramp.rfq.manualonto;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: MarketOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2011/06/11, 21:40:02
 */
public class MarketOntology extends jade.content.onto.Ontology  {

  //private static final long serialVersionUID = -1439939741134496089L;

  //NAME
  public static final String ONTOLOGY_NAME = "ComputeMarket";
  // The singleton instance of this ontology
  private static Ontology theInstance = new MarketOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
  public static final String RFQ="rfq";
  public static final String RFQ_CPUHOURCOST="CPUHOURCOST";
  public static final String RFQ_NOTBEFORE="NOTBEFORE";
  public static final String RFQ_DEADLINE="DEADLINE";
  public static final String RFQ_OPERATINGSYSTEM="OPERATINGSYSTEM";
  public static final String RFQ_OSVERSION="OSVERSION";
  public static final String RFQ_ARCHITECTURE="ARCHITECTURE";
  public static final String RFQ_CPUSPEED="CPUSPEED";
  public static final String RFQ_DURATION="DURATION";
  public static final String RFQ_INTERNODEBANDWIDTH="INTERNODEBANDWIDTH";
  public static final String RFQ_RAMPERCORE="RAMPERCORE";
  public static final String RFQ_NODEDISKSPACE="NODEDISKSPACE";
  public static final String RFQ_TOTALDISKSPACE="TOTALDISKSPACE";
  public static final String RFQ_TOTALCORES="TOTALCORES";
  public static final String RFQ_NODECORES="NODECORES";
  public static final String RFQ_NODECOUNT="NODECOUNT";
  public static final String RFQ_REQUESTID="REQUESTID";

 
    
    
    public static final String OFFER="Offer";
    public static final String OFFER_OFFERID="OFFERID";
    public static final String OFFER_OCPUHOURCOST="OCPUHOURCOST";
    public static final String OFFER_ONOTBEFORE="ONOTBEFORE";
    public static final String OFFER_ODEADLINE="ODEADLINE";
    public static final String OFFER_OOPERATINGSYSTEM="OOPERATINGSYSTEM";
    public static final String OFFER_OOSVERSION="OOSVERSION";
    public static final String OFFER_OARCHITECTURE="OARCHITECTURE";
    public static final String OFFER_OCPUSPEED="OCPUSPEED";
    public static final String OFFER_ODURATION="ODURATION";
    public static final String OFFER_OINTERNODEBANDWIDTH="OINTERNODEBANDWIDTH";
    public static final String OFFER_ORAMPERCORE="ORAMPERCORE";
    public static final String OFFER_ONODEDISKSPACE="ONODEDISKSPACE";
    public static final String OFFER_OTOTALDISKSPACE="OTOTALDISKSPACE";
    public static final String OFFER_OTOTALCORES="OTOTALCORES";
    public static final String OFFER_ONODECORES="ONODECORES";
    public static final String OFFER_ONODECOUNT="ONODECOUNT";
    public static final String OFFER_OREQUESTID="OREQUESTID";

    
    
    //public static final String CANCEL_CANCELINSTANCE="CANCELINSTANCE";
    //public static final String CANCEL="Cancel";
    public static final String MAKEOFFER_OFFERINSTANCE="OFFERINSTANCE";
    public static final String MAKEOFFER="MakeOffer";
    public static final String MAKEREQUEST_RFQINSTANCE="RFQINSTANCE";
    public static final String MAKEREQUEST="MakeRequest";
    //public static final String RESCHEDULE_RSCHEDINSTANCE="RSCHEDINSTANCE";
    //public static final String RESCHEDULE="Reschedule";


  /**
   * Constructor
  */
  private MarketOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    add(new ConceptSchema(RFQ), RFQ.class);
    add(new ConceptSchema(OFFER), uk.ac.ucl.chem.ccs.ramp.rfq.manualonto.Offer.class);
//    add(new AgentActionSchema(MAKEREQUEST), MakeRequest.class);
//    add(new AgentActionSchema(MAKEOFFER), MakeOffer.class);
    add(new PredicateSchema(MAKEREQUEST), MakeRequest.class);
    add(new PredicateSchema(MAKEOFFER), MakeOffer.class);
    
    ConceptSchema rfqSchema = (ConceptSchema)getSchema(RFQ);
    // adding fields
/*    rfqSchema.add(RFQ_TOTALDISKSPACE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_RAMPERCORE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_INTERNODEBANDWIDTH, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_CPUSPEED, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_OPERATINGSYSTEM, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_ARCHITECTURE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_OSVERSION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NODEDISKSPACE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_DEADLINE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NOTBEFORE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_CPUHOURCOST, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NODECOUNT, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_DURATION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NODECORES, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_TOTALCORES, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_REQUESTID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);*/

    rfqSchema.add(RFQ_TOTALDISKSPACE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_RAMPERCORE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_INTERNODEBANDWIDTH, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_CPUSPEED, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_OPERATINGSYSTEM, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_ARCHITECTURE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_OSVERSION, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NODEDISKSPACE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_DEADLINE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NOTBEFORE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_CPUHOURCOST, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NODECOUNT, (PrimitiveSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_DURATION, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_NODECORES, (PrimitiveSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_TOTALCORES, (PrimitiveSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    rfqSchema.add(RFQ_REQUESTID, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    
    
    ConceptSchema offerSchema = (ConceptSchema)getSchema(OFFER);
    offerSchema.add(OFFER_OTOTALDISKSPACE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_ORAMPERCORE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_OINTERNODEBANDWIDTH, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_OCPUSPEED, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_OOPERATINGSYSTEM, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_OARCHITECTURE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_OOSVERSION, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_ONODEDISKSPACE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_ODEADLINE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_ONOTBEFORE, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_OCPUHOURCOST, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_ONODECOUNT, (PrimitiveSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_ODURATION, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_ONODECORES, (PrimitiveSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_OTOTALCORES, (PrimitiveSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_OREQUESTID, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    offerSchema.add(OFFER_OFFERID, (PrimitiveSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    
    PredicateSchema makeRequestSchema = (PredicateSchema)getSchema(MAKEREQUEST);
    makeRequestSchema.add(MAKEREQUEST_RFQINSTANCE, (ConceptSchema)getSchema(RFQ), 1, ObjectSchema.UNLIMITED);//any number of RFQs can be requested

    PredicateSchema makeOfferSchema = (PredicateSchema)getSchema(MAKEOFFER);
    makeOfferSchema.add(MAKEOFFER_OFFERINSTANCE, (ConceptSchema)getSchema(OFFER), 1, ObjectSchema.UNLIMITED); //just one offer can be made

 //   ConceptSchema makeRequestSchema = (ConceptSchema)getSchema(MAKEREQUEST);
 //   makeRequestSchema.add(MAKEREQUEST_RFQINSTANCE, (ConceptSchema)getSchema(RFQ), 1, ObjectSchema.UNLIMITED);//any number of RFQs can be requested

//    ConceptSchema makeOfferSchema = (ConceptSchema)getSchema(MAKEOFFER);
//    makeOfferSchema.add(MAKEOFFER_OFFERINSTANCE, (ConceptSchema)getSchema(OFFER)); //just one offer can be made
    



    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
